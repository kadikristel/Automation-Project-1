/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!****************************************************!*\
  !*** ./cypress/e2e/registration_form_2_test.cy.js ***!
  \****************************************************/


beforeEach(() => {
  cy.visit("cypress/fixtures/registration_form_2.html");
});

/*
Assignement 4: add content to the following tests
*/

describe("Section 1: Functional tests", () => {
  it("User can use only same both first and validation passwords", () => {
    // Add test steps for filling in only mandatory fields
    cy.get("#username").type("kadikristel");
    cy.get("#email").type("kadi@test.com");
    cy.get('[data-cy="name"]').type("Kadi");
    cy.get("#lastName").type("Koop");
    cy.get('[data-testid="phoneNumberTestId"]').type("555666777");
    cy.get("#password").type("Password123");

    // Type confirmation password which is different from first password
    cy.get("#confirm").type("Pass321");
    cy.get("h2").contains("Password").click();
    cy.get('[name="confirm"]').type("{enter}");
    cy.window().scrollTo("bottom");
    cy.get("#password_error_message").should("be.visible").should("contain", "Passwords do not match!");
    cy.get("#success_message").should("not.be.visible");
    cy.get("button.submit_button").should("not.be.enabled");
    cy.get('input[name="confirm"]').should("have.attr", "title", "Both passwords should match");
    cy.get("#confirm").clear().type("Password123");
    cy.get("h2").contains("Password").click();
    cy.get("#password_error_message").should("not.be.visible");
    cy.get("#success_message").should("not.be.visible");
    cy.get("button.submit_button").should("be.enabled");
    cy.get("button.submit_button").click();
    cy.get("#success_message").should("be.visible");
  });
  it("User can submit form with all fields added", () => {
    // Add test steps for filling in ALL fields
    cy.get("#username").type("kadikristel");
    cy.get("#email").type("kadi@test.com");
    cy.get('[data-cy="name"]').type("Kadi");
    cy.get("#lastName").type("Koop");
    cy.get('[data-testid="phoneNumberTestId"]').type("555666777");
    cy.get('input[type="radio"]').eq(1).check().should("be.checked");
    cy.get('input[type="checkbox"]').eq(2).check().should("be.checked");
    cy.get("#cars").select(3);
    cy.get("#animal").select(1);
    cy.get("#password").type("Password123");
    cy.get("#confirm").type("Password123");

    // Assert that submit button is enabled
    cy.get("h2").contains("Password").click();
    cy.get(".submit_button").should("be.enabled").click();
    cy.get("#password_error_message").should("not.be.visible");
    cy.get("#input_error_message").should("not.be.visible");
    cy.get("#success_message").should("be.visible");
    cy.get("#success_message").should("have.css", "display", "block");
  });
  it("User can submit form with valid data and only mandatory fields added", () => {
    // Add test steps for filling in ONLY mandatory fields
    cy.get("#username").type("kadikristel");
    cy.get("#email").type("kadi@test.com");
    cy.get('[data-cy="name"]').type("Kadi");
    cy.get("#lastName").type("Koop");
    cy.get('[data-testid="phoneNumberTestId"]').type("555666777");
    cy.get("#password").type("Password123");
    cy.get("#confirm").type("Password123");

    // Assert that submit button is enabled
    cy.get("h2").contains("Password").click();
    cy.get("button.submit_button").should("be.enabled").click();

    // Assert that after submitting the form system shows successful message
    cy.get("#success_message").should("be.visible");

    // example, how to use function, which fills in all mandatory data
    // in order to see the content of the function, scroll to the end of the file
    inputValidData("johnDoe");
  });
});

/*
Assignement 5: create more visual tests
*/

describe("Section 2: Visual tests", () => {
  it("Check that logo is correct and has correct size", () => {
    cy.log("Will check logo source and size");
    cy.get("img").should("have.attr", "src").should("include", "cerebrum_hub_logo");
    // get element and check its parameter height
    // it should be less than 178 and greater than 100
    cy.get("img").invoke("height").should("be.lessThan", 178).and("be.greaterThan", 100);
  });
  it("My test for second picture", () => {
    cy.log("Check logo source and size for second picture");
  });
  it("Check navigation part", () => {
    cy.get("nav").children().should("have.length", 2);

    // Get navigation element, find siblings that contains h1 and check if it has Registration form in string
    cy.get("nav").siblings("h1").should("have.text", "Registration form number 2");

    // Get navigation element, find its first child, check the link content and click it
    cy.get("nav").children().eq(0).should("be.visible").and("have.attr", "href", "registration_form_1.html").click();

    // Check that currently opened URL is correct
    cy.url().should("contain", "/registration_form_1.html");

    // Go back to previous page
    cy.go("back");
    cy.log("Back again in registration form 2");
  });

  // Create similar test for checking the second link

  it("Check that radio button list is correct", () => {
    // Array of found elements with given selector has 4 elements in total
    cy.get('input[type="radio"]').should("have.length", 4);

    // Verify labels of the radio buttons
    cy.get('input[type="radio"]').next().eq(0).should("have.text", "HTML");
    cy.get('input[type="radio"]').next().eq(1).should("have.text", "CSS");
    cy.get('input[type="radio"]').next().eq(2).should("have.text", "JavaScript");
    cy.get('input[type="radio"]').next().eq(3).should("have.text", "PHP");

    //Verify default state of radio buttons
    cy.get('input[type="radio"]').eq(0).should("not.be.checked");
    cy.get('input[type="radio"]').eq(1).should("not.be.checked");
    cy.get('input[type="radio"]').eq(2).should("not.be.checked");
    cy.get('input[type="radio"]').eq(3).should("not.be.checked");

    // Selecting one will remove selection from the other radio button
    cy.get('input[type="radio"]').eq(0).check().should("be.checked");
    cy.get('input[type="radio"]').eq(1).check().should("be.checked");
    cy.get('input[type="radio"]').eq(0).should("not.be.checked");
  });

  // Create test similar to previous one verifying check boxes

  it("Car dropdown is correct", () => {
    // Here is just an example how to explicitely create screenshot from the code
    // Select second element and create screenshot for this area or full page
    cy.get("#cars").select(1).screenshot("Cars drop-down");
    cy.screenshot("Full page screenshot");

    // Here are given different solutions how to get the length of array of elements in Cars dropdown
    // Next 2 lines of code do exactly the same!
    cy.get("#cars").children().should("have.length", 4);
    cy.get("#cars").find("option").should("have.length", 4);

    // Check  that first element in the dropdown has text Volvo
    cy.get("#cars").find("option").eq(0).should("have.text", "Volvo");

    // Advanced level how to check the content of the Cars dropdown
    cy.get("#cars").find("option").then(options => {
      const actual = [...options].map(option => option.value);
      expect(actual).to.deep.eq(["volvo", "saab", "opel", "audi"]);
    });
  });

  // Create test similar to previous one
});

function inputValidData(username) {
  cy.log("Username will be filled");
  cy.get('input[data-testid="user"]').type(username);
  cy.get("#email").type("validemail@yeap.com");
  cy.get('[data-cy="name"]').type("John");
  cy.get("#lastName").type("Doe");
  cy.get('[data-testid="phoneNumberTestId"]').type("10203040");
  cy.get("#password").type("MyPass");
  cy.get("#confirm").type("MyPass");
  cy.get("h2").contains("Password").click();
}
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0FBQ0YsQ0FBQyxDQUFDOztBQUVGLFNBQVNHLGNBQWNBLENBQUNvQixRQUFRLEVBQUU7RUFDaENuQyxFQUFFLENBQUNnQixHQUFHLENBQUMseUJBQXlCLENBQUM7RUFDakNoQixFQUFFLENBQUNJLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDQyxJQUFJLENBQUM4QixRQUFRLENBQUM7RUFDbERuQyxFQUFFLENBQUNJLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLHFCQUFxQixDQUFDO0VBQzVDTCxFQUFFLENBQUNJLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDQyxJQUFJLENBQUMsTUFBTSxDQUFDO0VBQ3ZDTCxFQUFFLENBQUNJLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEtBQUssQ0FBQztFQUMvQkwsRUFBRSxDQUFDSSxHQUFHLENBQUMsbUNBQW1DLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLFVBQVUsQ0FBQztFQUM1REwsRUFBRSxDQUFDSSxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUNDLElBQUksQ0FBQyxRQUFRLENBQUM7RUFDbENMLEVBQUUsQ0FBQ0ksR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDQyxJQUFJLENBQUMsUUFBUSxDQUFDO0VBQ2pDTCxFQUFFLENBQUNJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQ0UsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDQyxLQUFLLENBQUMsQ0FBQztBQUMzQyxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3lwcmVzc3R1dG9yaWFsLy4vY3lwcmVzcy9lMmUvcmVnaXN0cmF0aW9uX2Zvcm1fMl90ZXN0LmN5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImJlZm9yZUVhY2goKCkgPT4ge1xyXG4gIGN5LnZpc2l0KFwiY3lwcmVzcy9maXh0dXJlcy9yZWdpc3RyYXRpb25fZm9ybV8yLmh0bWxcIik7XHJcbn0pO1xyXG5cclxuLypcclxuQXNzaWduZW1lbnQgNDogYWRkIGNvbnRlbnQgdG8gdGhlIGZvbGxvd2luZyB0ZXN0c1xyXG4qL1xyXG5cclxuZGVzY3JpYmUoXCJTZWN0aW9uIDE6IEZ1bmN0aW9uYWwgdGVzdHNcIiwgKCkgPT4ge1xyXG4gIGl0KFwiVXNlciBjYW4gdXNlIG9ubHkgc2FtZSBib3RoIGZpcnN0IGFuZCB2YWxpZGF0aW9uIHBhc3N3b3Jkc1wiLCAoKSA9PiB7XHJcbiAgICAvLyBBZGQgdGVzdCBzdGVwcyBmb3IgZmlsbGluZyBpbiBvbmx5IG1hbmRhdG9yeSBmaWVsZHNcclxuICAgIGN5LmdldChcIiN1c2VybmFtZVwiKS50eXBlKFwia2FkaWtyaXN0ZWxcIik7XHJcbiAgICBjeS5nZXQoXCIjZW1haWxcIikudHlwZShcImthZGlAdGVzdC5jb21cIik7XHJcbiAgICBjeS5nZXQoJ1tkYXRhLWN5PVwibmFtZVwiXScpLnR5cGUoXCJLYWRpXCIpO1xyXG4gICAgY3kuZ2V0KFwiI2xhc3ROYW1lXCIpLnR5cGUoXCJLb29wXCIpO1xyXG4gICAgY3kuZ2V0KCdbZGF0YS10ZXN0aWQ9XCJwaG9uZU51bWJlclRlc3RJZFwiXScpLnR5cGUoXCI1NTU2NjY3NzdcIik7XHJcbiAgICBjeS5nZXQoXCIjcGFzc3dvcmRcIikudHlwZShcIlBhc3N3b3JkMTIzXCIpO1xyXG5cclxuICAgIC8vIFR5cGUgY29uZmlybWF0aW9uIHBhc3N3b3JkIHdoaWNoIGlzIGRpZmZlcmVudCBmcm9tIGZpcnN0IHBhc3N3b3JkXHJcbiAgICBjeS5nZXQoXCIjY29uZmlybVwiKS50eXBlKFwiUGFzczMyMVwiKTtcclxuICAgIGN5LmdldChcImgyXCIpLmNvbnRhaW5zKFwiUGFzc3dvcmRcIikuY2xpY2soKTtcclxuICAgIGN5LmdldCgnW25hbWU9XCJjb25maXJtXCJdJykudHlwZShcIntlbnRlcn1cIik7XHJcbiAgICBjeS53aW5kb3coKS5zY3JvbGxUbyhcImJvdHRvbVwiKTtcclxuICAgIGN5LmdldChcIiNwYXNzd29yZF9lcnJvcl9tZXNzYWdlXCIpXHJcbiAgICAgIC5zaG91bGQoXCJiZS52aXNpYmxlXCIpXHJcbiAgICAgIC5zaG91bGQoXCJjb250YWluXCIsIFwiUGFzc3dvcmRzIGRvIG5vdCBtYXRjaCFcIik7XHJcblxyXG4gICAgY3kuZ2V0KFwiI3N1Y2Nlc3NfbWVzc2FnZVwiKS5zaG91bGQoXCJub3QuYmUudmlzaWJsZVwiKTtcclxuICAgIGN5LmdldChcImJ1dHRvbi5zdWJtaXRfYnV0dG9uXCIpLnNob3VsZChcIm5vdC5iZS5lbmFibGVkXCIpO1xyXG4gICAgY3kuZ2V0KCdpbnB1dFtuYW1lPVwiY29uZmlybVwiXScpLnNob3VsZChcclxuICAgICAgXCJoYXZlLmF0dHJcIixcclxuICAgICAgXCJ0aXRsZVwiLFxyXG4gICAgICBcIkJvdGggcGFzc3dvcmRzIHNob3VsZCBtYXRjaFwiXHJcbiAgICApO1xyXG4gICAgY3kuZ2V0KFwiI2NvbmZpcm1cIikuY2xlYXIoKS50eXBlKFwiUGFzc3dvcmQxMjNcIik7XHJcbiAgICBjeS5nZXQoXCJoMlwiKS5jb250YWlucyhcIlBhc3N3b3JkXCIpLmNsaWNrKCk7XHJcbiAgICBjeS5nZXQoXCIjcGFzc3dvcmRfZXJyb3JfbWVzc2FnZVwiKS5zaG91bGQoXCJub3QuYmUudmlzaWJsZVwiKTtcclxuICAgIGN5LmdldChcIiNzdWNjZXNzX21lc3NhZ2VcIikuc2hvdWxkKFwibm90LmJlLnZpc2libGVcIik7XHJcbiAgICBjeS5nZXQoXCJidXR0b24uc3VibWl0X2J1dHRvblwiKS5zaG91bGQoXCJiZS5lbmFibGVkXCIpO1xyXG4gICAgY3kuZ2V0KFwiYnV0dG9uLnN1Ym1pdF9idXR0b25cIikuY2xpY2soKTtcclxuICAgIGN5LmdldChcIiNzdWNjZXNzX21lc3NhZ2VcIikuc2hvdWxkKFwiYmUudmlzaWJsZVwiKTtcclxuICB9KTtcclxuXHJcbiAgaXQoXCJVc2VyIGNhbiBzdWJtaXQgZm9ybSB3aXRoIGFsbCBmaWVsZHMgYWRkZWRcIiwgKCkgPT4ge1xyXG4gICAgLy8gQWRkIHRlc3Qgc3RlcHMgZm9yIGZpbGxpbmcgaW4gQUxMIGZpZWxkc1xyXG4gICAgY3kuZ2V0KFwiI3VzZXJuYW1lXCIpLnR5cGUoXCJrYWRpa3Jpc3RlbFwiKTtcclxuICAgIGN5LmdldChcIiNlbWFpbFwiKS50eXBlKFwia2FkaUB0ZXN0LmNvbVwiKTtcclxuICAgIGN5LmdldCgnW2RhdGEtY3k9XCJuYW1lXCJdJykudHlwZShcIkthZGlcIik7XHJcbiAgICBjeS5nZXQoXCIjbGFzdE5hbWVcIikudHlwZShcIktvb3BcIik7XHJcbiAgICBjeS5nZXQoJ1tkYXRhLXRlc3RpZD1cInBob25lTnVtYmVyVGVzdElkXCJdJykudHlwZShcIjU1NTY2Njc3N1wiKTtcclxuICAgIGN5LmdldCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdJykuZXEoMSkuY2hlY2soKS5zaG91bGQoXCJiZS5jaGVja2VkXCIpO1xyXG4gICAgY3kuZ2V0KCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKS5lcSgyKS5jaGVjaygpLnNob3VsZChcImJlLmNoZWNrZWRcIik7XHJcbiAgICBjeS5nZXQoXCIjY2Fyc1wiKS5zZWxlY3QoMyk7XHJcbiAgICBjeS5nZXQoXCIjYW5pbWFsXCIpLnNlbGVjdCgxKTtcclxuICAgIGN5LmdldChcIiNwYXNzd29yZFwiKS50eXBlKFwiUGFzc3dvcmQxMjNcIik7XHJcbiAgICBjeS5nZXQoXCIjY29uZmlybVwiKS50eXBlKFwiUGFzc3dvcmQxMjNcIik7XHJcblxyXG4gICAgLy8gQXNzZXJ0IHRoYXQgc3VibWl0IGJ1dHRvbiBpcyBlbmFibGVkXHJcbiAgICBjeS5nZXQoXCJoMlwiKS5jb250YWlucyhcIlBhc3N3b3JkXCIpLmNsaWNrKCk7XHJcbiAgICBjeS5nZXQoXCIuc3VibWl0X2J1dHRvblwiKS5zaG91bGQoXCJiZS5lbmFibGVkXCIpLmNsaWNrKCk7XHJcblxyXG4gICAgY3kuZ2V0KFwiI3Bhc3N3b3JkX2Vycm9yX21lc3NhZ2VcIikuc2hvdWxkKFwibm90LmJlLnZpc2libGVcIik7XHJcbiAgICBjeS5nZXQoXCIjaW5wdXRfZXJyb3JfbWVzc2FnZVwiKS5zaG91bGQoXCJub3QuYmUudmlzaWJsZVwiKTtcclxuICAgIGN5LmdldChcIiNzdWNjZXNzX21lc3NhZ2VcIikuc2hvdWxkKFwiYmUudmlzaWJsZVwiKTtcclxuICAgIGN5LmdldChcIiNzdWNjZXNzX21lc3NhZ2VcIikuc2hvdWxkKFwiaGF2ZS5jc3NcIiwgXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XHJcbiAgfSk7XHJcblxyXG4gIGl0KFwiVXNlciBjYW4gc3VibWl0IGZvcm0gd2l0aCB2YWxpZCBkYXRhIGFuZCBvbmx5IG1hbmRhdG9yeSBmaWVsZHMgYWRkZWRcIiwgKCkgPT4ge1xyXG4gICAgLy8gQWRkIHRlc3Qgc3RlcHMgZm9yIGZpbGxpbmcgaW4gT05MWSBtYW5kYXRvcnkgZmllbGRzXHJcbiAgICBjeS5nZXQoXCIjdXNlcm5hbWVcIikudHlwZShcImthZGlrcmlzdGVsXCIpO1xyXG4gICAgY3kuZ2V0KFwiI2VtYWlsXCIpLnR5cGUoXCJrYWRpQHRlc3QuY29tXCIpO1xyXG4gICAgY3kuZ2V0KCdbZGF0YS1jeT1cIm5hbWVcIl0nKS50eXBlKFwiS2FkaVwiKTtcclxuICAgIGN5LmdldChcIiNsYXN0TmFtZVwiKS50eXBlKFwiS29vcFwiKTtcclxuICAgIGN5LmdldCgnW2RhdGEtdGVzdGlkPVwicGhvbmVOdW1iZXJUZXN0SWRcIl0nKS50eXBlKFwiNTU1NjY2Nzc3XCIpO1xyXG4gICAgY3kuZ2V0KFwiI3Bhc3N3b3JkXCIpLnR5cGUoXCJQYXNzd29yZDEyM1wiKTtcclxuICAgIGN5LmdldChcIiNjb25maXJtXCIpLnR5cGUoXCJQYXNzd29yZDEyM1wiKTtcclxuXHJcbiAgICAvLyBBc3NlcnQgdGhhdCBzdWJtaXQgYnV0dG9uIGlzIGVuYWJsZWRcclxuICAgIGN5LmdldChcImgyXCIpLmNvbnRhaW5zKFwiUGFzc3dvcmRcIikuY2xpY2soKTtcclxuICAgIGN5LmdldChcImJ1dHRvbi5zdWJtaXRfYnV0dG9uXCIpLnNob3VsZChcImJlLmVuYWJsZWRcIikuY2xpY2soKTtcclxuXHJcbiAgICAvLyBBc3NlcnQgdGhhdCBhZnRlciBzdWJtaXR0aW5nIHRoZSBmb3JtIHN5c3RlbSBzaG93cyBzdWNjZXNzZnVsIG1lc3NhZ2VcclxuICAgIGN5LmdldChcIiNzdWNjZXNzX21lc3NhZ2VcIikuc2hvdWxkKFwiYmUudmlzaWJsZVwiKTtcclxuXHJcbiAgICAvLyBleGFtcGxlLCBob3cgdG8gdXNlIGZ1bmN0aW9uLCB3aGljaCBmaWxscyBpbiBhbGwgbWFuZGF0b3J5IGRhdGFcclxuICAgIC8vIGluIG9yZGVyIHRvIHNlZSB0aGUgY29udGVudCBvZiB0aGUgZnVuY3Rpb24sIHNjcm9sbCB0byB0aGUgZW5kIG9mIHRoZSBmaWxlXHJcbiAgICBpbnB1dFZhbGlkRGF0YShcImpvaG5Eb2VcIik7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuLypcclxuQXNzaWduZW1lbnQgNTogY3JlYXRlIG1vcmUgdmlzdWFsIHRlc3RzXHJcbiovXHJcblxyXG5kZXNjcmliZShcIlNlY3Rpb24gMjogVmlzdWFsIHRlc3RzXCIsICgpID0+IHtcclxuICBpdChcIkNoZWNrIHRoYXQgbG9nbyBpcyBjb3JyZWN0IGFuZCBoYXMgY29ycmVjdCBzaXplXCIsICgpID0+IHtcclxuICAgIGN5LmxvZyhcIldpbGwgY2hlY2sgbG9nbyBzb3VyY2UgYW5kIHNpemVcIik7XHJcbiAgICBjeS5nZXQoXCJpbWdcIilcclxuICAgICAgLnNob3VsZChcImhhdmUuYXR0clwiLCBcInNyY1wiKVxyXG4gICAgICAuc2hvdWxkKFwiaW5jbHVkZVwiLCBcImNlcmVicnVtX2h1Yl9sb2dvXCIpO1xyXG4gICAgLy8gZ2V0IGVsZW1lbnQgYW5kIGNoZWNrIGl0cyBwYXJhbWV0ZXIgaGVpZ2h0XHJcbiAgICAvLyBpdCBzaG91bGQgYmUgbGVzcyB0aGFuIDE3OCBhbmQgZ3JlYXRlciB0aGFuIDEwMFxyXG4gICAgY3kuZ2V0KFwiaW1nXCIpXHJcbiAgICAgIC5pbnZva2UoXCJoZWlnaHRcIilcclxuICAgICAgLnNob3VsZChcImJlLmxlc3NUaGFuXCIsIDE3OClcclxuICAgICAgLmFuZChcImJlLmdyZWF0ZXJUaGFuXCIsIDEwMCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KFwiTXkgdGVzdCBmb3Igc2Vjb25kIHBpY3R1cmVcIiwgKCkgPT4ge1xyXG4gICAgY3kubG9nKFwiQ2hlY2sgbG9nbyBzb3VyY2UgYW5kIHNpemUgZm9yIHNlY29uZCBwaWN0dXJlXCIpO1xyXG4gIH0pO1xyXG5cclxuICBpdChcIkNoZWNrIG5hdmlnYXRpb24gcGFydFwiLCAoKSA9PiB7XHJcbiAgICBjeS5nZXQoXCJuYXZcIikuY2hpbGRyZW4oKS5zaG91bGQoXCJoYXZlLmxlbmd0aFwiLCAyKTtcclxuXHJcbiAgICAvLyBHZXQgbmF2aWdhdGlvbiBlbGVtZW50LCBmaW5kIHNpYmxpbmdzIHRoYXQgY29udGFpbnMgaDEgYW5kIGNoZWNrIGlmIGl0IGhhcyBSZWdpc3RyYXRpb24gZm9ybSBpbiBzdHJpbmdcclxuICAgIGN5LmdldChcIm5hdlwiKVxyXG4gICAgICAuc2libGluZ3MoXCJoMVwiKVxyXG4gICAgICAuc2hvdWxkKFwiaGF2ZS50ZXh0XCIsIFwiUmVnaXN0cmF0aW9uIGZvcm0gbnVtYmVyIDJcIik7XHJcblxyXG4gICAgLy8gR2V0IG5hdmlnYXRpb24gZWxlbWVudCwgZmluZCBpdHMgZmlyc3QgY2hpbGQsIGNoZWNrIHRoZSBsaW5rIGNvbnRlbnQgYW5kIGNsaWNrIGl0XHJcbiAgICBjeS5nZXQoXCJuYXZcIilcclxuICAgICAgLmNoaWxkcmVuKClcclxuICAgICAgLmVxKDApXHJcbiAgICAgIC5zaG91bGQoXCJiZS52aXNpYmxlXCIpXHJcbiAgICAgIC5hbmQoXCJoYXZlLmF0dHJcIiwgXCJocmVmXCIsIFwicmVnaXN0cmF0aW9uX2Zvcm1fMS5odG1sXCIpXHJcbiAgICAgIC5jbGljaygpO1xyXG5cclxuICAgIC8vIENoZWNrIHRoYXQgY3VycmVudGx5IG9wZW5lZCBVUkwgaXMgY29ycmVjdFxyXG4gICAgY3kudXJsKCkuc2hvdWxkKFwiY29udGFpblwiLCBcIi9yZWdpc3RyYXRpb25fZm9ybV8xLmh0bWxcIik7XHJcblxyXG4gICAgLy8gR28gYmFjayB0byBwcmV2aW91cyBwYWdlXHJcbiAgICBjeS5nbyhcImJhY2tcIik7XHJcbiAgICBjeS5sb2coXCJCYWNrIGFnYWluIGluIHJlZ2lzdHJhdGlvbiBmb3JtIDJcIik7XHJcbiAgfSk7XHJcblxyXG4gIC8vIENyZWF0ZSBzaW1pbGFyIHRlc3QgZm9yIGNoZWNraW5nIHRoZSBzZWNvbmQgbGlua1xyXG5cclxuICBpdChcIkNoZWNrIHRoYXQgcmFkaW8gYnV0dG9uIGxpc3QgaXMgY29ycmVjdFwiLCAoKSA9PiB7XHJcbiAgICAvLyBBcnJheSBvZiBmb3VuZCBlbGVtZW50cyB3aXRoIGdpdmVuIHNlbGVjdG9yIGhhcyA0IGVsZW1lbnRzIGluIHRvdGFsXHJcbiAgICBjeS5nZXQoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScpLnNob3VsZChcImhhdmUubGVuZ3RoXCIsIDQpO1xyXG5cclxuICAgIC8vIFZlcmlmeSBsYWJlbHMgb2YgdGhlIHJhZGlvIGJ1dHRvbnNcclxuICAgIGN5LmdldCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdJykubmV4dCgpLmVxKDApLnNob3VsZChcImhhdmUudGV4dFwiLCBcIkhUTUxcIik7XHJcbiAgICBjeS5nZXQoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScpLm5leHQoKS5lcSgxKS5zaG91bGQoXCJoYXZlLnRleHRcIiwgXCJDU1NcIik7XHJcbiAgICBjeS5nZXQoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScpXHJcbiAgICAgIC5uZXh0KClcclxuICAgICAgLmVxKDIpXHJcbiAgICAgIC5zaG91bGQoXCJoYXZlLnRleHRcIiwgXCJKYXZhU2NyaXB0XCIpO1xyXG4gICAgY3kuZ2V0KCdpbnB1dFt0eXBlPVwicmFkaW9cIl0nKS5uZXh0KCkuZXEoMykuc2hvdWxkKFwiaGF2ZS50ZXh0XCIsIFwiUEhQXCIpO1xyXG5cclxuICAgIC8vVmVyaWZ5IGRlZmF1bHQgc3RhdGUgb2YgcmFkaW8gYnV0dG9uc1xyXG4gICAgY3kuZ2V0KCdpbnB1dFt0eXBlPVwicmFkaW9cIl0nKS5lcSgwKS5zaG91bGQoXCJub3QuYmUuY2hlY2tlZFwiKTtcclxuICAgIGN5LmdldCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdJykuZXEoMSkuc2hvdWxkKFwibm90LmJlLmNoZWNrZWRcIik7XHJcbiAgICBjeS5nZXQoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScpLmVxKDIpLnNob3VsZChcIm5vdC5iZS5jaGVja2VkXCIpO1xyXG4gICAgY3kuZ2V0KCdpbnB1dFt0eXBlPVwicmFkaW9cIl0nKS5lcSgzKS5zaG91bGQoXCJub3QuYmUuY2hlY2tlZFwiKTtcclxuXHJcbiAgICAvLyBTZWxlY3Rpbmcgb25lIHdpbGwgcmVtb3ZlIHNlbGVjdGlvbiBmcm9tIHRoZSBvdGhlciByYWRpbyBidXR0b25cclxuICAgIGN5LmdldCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdJykuZXEoMCkuY2hlY2soKS5zaG91bGQoXCJiZS5jaGVja2VkXCIpO1xyXG4gICAgY3kuZ2V0KCdpbnB1dFt0eXBlPVwicmFkaW9cIl0nKS5lcSgxKS5jaGVjaygpLnNob3VsZChcImJlLmNoZWNrZWRcIik7XHJcbiAgICBjeS5nZXQoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScpLmVxKDApLnNob3VsZChcIm5vdC5iZS5jaGVja2VkXCIpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBDcmVhdGUgdGVzdCBzaW1pbGFyIHRvIHByZXZpb3VzIG9uZSB2ZXJpZnlpbmcgY2hlY2sgYm94ZXNcclxuXHJcbiAgaXQoXCJDYXIgZHJvcGRvd24gaXMgY29ycmVjdFwiLCAoKSA9PiB7XHJcbiAgICAvLyBIZXJlIGlzIGp1c3QgYW4gZXhhbXBsZSBob3cgdG8gZXhwbGljaXRlbHkgY3JlYXRlIHNjcmVlbnNob3QgZnJvbSB0aGUgY29kZVxyXG4gICAgLy8gU2VsZWN0IHNlY29uZCBlbGVtZW50IGFuZCBjcmVhdGUgc2NyZWVuc2hvdCBmb3IgdGhpcyBhcmVhIG9yIGZ1bGwgcGFnZVxyXG4gICAgY3kuZ2V0KFwiI2NhcnNcIikuc2VsZWN0KDEpLnNjcmVlbnNob3QoXCJDYXJzIGRyb3AtZG93blwiKTtcclxuICAgIGN5LnNjcmVlbnNob3QoXCJGdWxsIHBhZ2Ugc2NyZWVuc2hvdFwiKTtcclxuXHJcbiAgICAvLyBIZXJlIGFyZSBnaXZlbiBkaWZmZXJlbnQgc29sdXRpb25zIGhvdyB0byBnZXQgdGhlIGxlbmd0aCBvZiBhcnJheSBvZiBlbGVtZW50cyBpbiBDYXJzIGRyb3Bkb3duXHJcbiAgICAvLyBOZXh0IDIgbGluZXMgb2YgY29kZSBkbyBleGFjdGx5IHRoZSBzYW1lIVxyXG4gICAgY3kuZ2V0KFwiI2NhcnNcIikuY2hpbGRyZW4oKS5zaG91bGQoXCJoYXZlLmxlbmd0aFwiLCA0KTtcclxuICAgIGN5LmdldChcIiNjYXJzXCIpLmZpbmQoXCJvcHRpb25cIikuc2hvdWxkKFwiaGF2ZS5sZW5ndGhcIiwgNCk7XHJcblxyXG4gICAgLy8gQ2hlY2sgIHRoYXQgZmlyc3QgZWxlbWVudCBpbiB0aGUgZHJvcGRvd24gaGFzIHRleHQgVm9sdm9cclxuICAgIGN5LmdldChcIiNjYXJzXCIpLmZpbmQoXCJvcHRpb25cIikuZXEoMCkuc2hvdWxkKFwiaGF2ZS50ZXh0XCIsIFwiVm9sdm9cIik7XHJcblxyXG4gICAgLy8gQWR2YW5jZWQgbGV2ZWwgaG93IHRvIGNoZWNrIHRoZSBjb250ZW50IG9mIHRoZSBDYXJzIGRyb3Bkb3duXHJcbiAgICBjeS5nZXQoXCIjY2Fyc1wiKVxyXG4gICAgICAuZmluZChcIm9wdGlvblwiKVxyXG4gICAgICAudGhlbigob3B0aW9ucykgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFjdHVhbCA9IFsuLi5vcHRpb25zXS5tYXAoKG9wdGlvbikgPT4gb3B0aW9uLnZhbHVlKTtcclxuICAgICAgICBleHBlY3QoYWN0dWFsKS50by5kZWVwLmVxKFtcInZvbHZvXCIsIFwic2FhYlwiLCBcIm9wZWxcIiwgXCJhdWRpXCJdKTtcclxuICAgICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIENyZWF0ZSB0ZXN0IHNpbWlsYXIgdG8gcHJldmlvdXMgb25lXHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gaW5wdXRWYWxpZERhdGEodXNlcm5hbWUpIHtcclxuICBjeS5sb2coXCJVc2VybmFtZSB3aWxsIGJlIGZpbGxlZFwiKTtcclxuICBjeS5nZXQoJ2lucHV0W2RhdGEtdGVzdGlkPVwidXNlclwiXScpLnR5cGUodXNlcm5hbWUpO1xyXG4gIGN5LmdldChcIiNlbWFpbFwiKS50eXBlKFwidmFsaWRlbWFpbEB5ZWFwLmNvbVwiKTtcclxuICBjeS5nZXQoJ1tkYXRhLWN5PVwibmFtZVwiXScpLnR5cGUoXCJKb2huXCIpO1xyXG4gIGN5LmdldChcIiNsYXN0TmFtZVwiKS50eXBlKFwiRG9lXCIpO1xyXG4gIGN5LmdldCgnW2RhdGEtdGVzdGlkPVwicGhvbmVOdW1iZXJUZXN0SWRcIl0nKS50eXBlKFwiMTAyMDMwNDBcIik7XHJcbiAgY3kuZ2V0KFwiI3Bhc3N3b3JkXCIpLnR5cGUoXCJNeVBhc3NcIik7XHJcbiAgY3kuZ2V0KFwiI2NvbmZpcm1cIikudHlwZShcIk15UGFzc1wiKTtcclxuICBjeS5nZXQoXCJoMlwiKS5jb250YWlucyhcIlBhc3N3b3JkXCIpLmNsaWNrKCk7XHJcbn1cclxuIl0sIm5hbWVzIjpbImJlZm9yZUVhY2giLCJjeSIsInZpc2l0IiwiZGVzY3JpYmUiLCJpdCIsImdldCIsInR5cGUiLCJjb250YWlucyIsImNsaWNrIiwid2luZG93Iiwic2Nyb2xsVG8iLCJzaG91bGQiLCJjbGVhciIsImVxIiwiY2hlY2siLCJzZWxlY3QiLCJpbnB1dFZhbGlkRGF0YSIsImxvZyIsImludm9rZSIsImFuZCIsImNoaWxkcmVuIiwic2libGluZ3MiLCJ1cmwiLCJnbyIsIm5leHQiLCJzY3JlZW5zaG90IiwiZmluZCIsInRoZW4iLCJvcHRpb25zIiwiYWN0dWFsIiwibWFwIiwib3B0aW9uIiwidmFsdWUiLCJleHBlY3QiLCJ0byIsImRlZXAiLCJ1c2VybmFtZSJdLCJzb3VyY2VSb290IjoiIn0=