/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../AppData/Local/Cypress/Cache/13.4.0/Cypress/resources/app/node_modules/constants-browserify/constants.json":
/*!********************************************************************************************************************!*\
  !*** ../AppData/Local/Cypress/Cache/13.4.0/Cypress/resources/app/node_modules/constants-browserify/constants.json ***!
  \********************************************************************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"O_RDONLY":0,"O_WRONLY":1,"O_RDWR":2,"S_IFMT":61440,"S_IFREG":32768,"S_IFDIR":16384,"S_IFCHR":8192,"S_IFBLK":24576,"S_IFIFO":4096,"S_IFLNK":40960,"S_IFSOCK":49152,"O_CREAT":512,"O_EXCL":2048,"O_NOCTTY":131072,"O_TRUNC":1024,"O_APPEND":8,"O_DIRECTORY":1048576,"O_NOFOLLOW":256,"O_SYNC":128,"O_SYMLINK":2097152,"O_NONBLOCK":4,"S_IRWXU":448,"S_IRUSR":256,"S_IWUSR":128,"S_IXUSR":64,"S_IRWXG":56,"S_IRGRP":32,"S_IWGRP":16,"S_IXGRP":8,"S_IRWXO":7,"S_IROTH":4,"S_IWOTH":2,"S_IXOTH":1,"E2BIG":7,"EACCES":13,"EADDRINUSE":48,"EADDRNOTAVAIL":49,"EAFNOSUPPORT":47,"EAGAIN":35,"EALREADY":37,"EBADF":9,"EBADMSG":94,"EBUSY":16,"ECANCELED":89,"ECHILD":10,"ECONNABORTED":53,"ECONNREFUSED":61,"ECONNRESET":54,"EDEADLK":11,"EDESTADDRREQ":39,"EDOM":33,"EDQUOT":69,"EEXIST":17,"EFAULT":14,"EFBIG":27,"EHOSTUNREACH":65,"EIDRM":90,"EILSEQ":92,"EINPROGRESS":36,"EINTR":4,"EINVAL":22,"EIO":5,"EISCONN":56,"EISDIR":21,"ELOOP":62,"EMFILE":24,"EMLINK":31,"EMSGSIZE":40,"EMULTIHOP":95,"ENAMETOOLONG":63,"ENETDOWN":50,"ENETRESET":52,"ENETUNREACH":51,"ENFILE":23,"ENOBUFS":55,"ENODATA":96,"ENODEV":19,"ENOENT":2,"ENOEXEC":8,"ENOLCK":77,"ENOLINK":97,"ENOMEM":12,"ENOMSG":91,"ENOPROTOOPT":42,"ENOSPC":28,"ENOSR":98,"ENOSTR":99,"ENOSYS":78,"ENOTCONN":57,"ENOTDIR":20,"ENOTEMPTY":66,"ENOTSOCK":38,"ENOTSUP":45,"ENOTTY":25,"ENXIO":6,"EOPNOTSUPP":102,"EOVERFLOW":84,"EPERM":1,"EPIPE":32,"EPROTO":100,"EPROTONOSUPPORT":43,"EPROTOTYPE":41,"ERANGE":34,"EROFS":30,"ESPIPE":29,"ESRCH":3,"ESTALE":70,"ETIME":101,"ETIMEDOUT":60,"ETXTBSY":26,"EWOULDBLOCK":35,"EXDEV":18,"SIGHUP":1,"SIGINT":2,"SIGQUIT":3,"SIGILL":4,"SIGTRAP":5,"SIGABRT":6,"SIGIOT":6,"SIGBUS":10,"SIGFPE":8,"SIGKILL":9,"SIGUSR1":30,"SIGSEGV":11,"SIGUSR2":31,"SIGPIPE":13,"SIGALRM":14,"SIGTERM":15,"SIGCHLD":20,"SIGCONT":19,"SIGSTOP":17,"SIGTSTP":18,"SIGTTIN":21,"SIGTTOU":22,"SIGURG":16,"SIGXCPU":24,"SIGXFSZ":25,"SIGVTALRM":26,"SIGPROF":27,"SIGWINCH":28,"SIGIO":23,"SIGSYS":12,"SSL_OP_ALL":2147486719,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION":262144,"SSL_OP_CIPHER_SERVER_PREFERENCE":4194304,"SSL_OP_CISCO_ANYCONNECT":32768,"SSL_OP_COOKIE_EXCHANGE":8192,"SSL_OP_CRYPTOPRO_TLSEXT_BUG":2147483648,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS":2048,"SSL_OP_EPHEMERAL_RSA":0,"SSL_OP_LEGACY_SERVER_CONNECT":4,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER":32,"SSL_OP_MICROSOFT_SESS_ID_BUG":1,"SSL_OP_MSIE_SSLV2_RSA_PADDING":0,"SSL_OP_NETSCAPE_CA_DN_BUG":536870912,"SSL_OP_NETSCAPE_CHALLENGE_BUG":2,"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG":1073741824,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG":8,"SSL_OP_NO_COMPRESSION":131072,"SSL_OP_NO_QUERY_MTU":4096,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION":65536,"SSL_OP_NO_SSLv2":16777216,"SSL_OP_NO_SSLv3":33554432,"SSL_OP_NO_TICKET":16384,"SSL_OP_NO_TLSv1":67108864,"SSL_OP_NO_TLSv1_1":268435456,"SSL_OP_NO_TLSv1_2":134217728,"SSL_OP_PKCS1_CHECK_1":0,"SSL_OP_PKCS1_CHECK_2":0,"SSL_OP_SINGLE_DH_USE":1048576,"SSL_OP_SINGLE_ECDH_USE":524288,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG":128,"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG":0,"SSL_OP_TLS_BLOCK_PADDING_BUG":512,"SSL_OP_TLS_D5_BUG":256,"SSL_OP_TLS_ROLLBACK_BUG":8388608,"ENGINE_METHOD_DSA":2,"ENGINE_METHOD_DH":4,"ENGINE_METHOD_RAND":8,"ENGINE_METHOD_ECDH":16,"ENGINE_METHOD_ECDSA":32,"ENGINE_METHOD_CIPHERS":64,"ENGINE_METHOD_DIGESTS":128,"ENGINE_METHOD_STORE":256,"ENGINE_METHOD_PKEY_METHS":512,"ENGINE_METHOD_PKEY_ASN1_METHS":1024,"ENGINE_METHOD_ALL":65535,"ENGINE_METHOD_NONE":0,"DH_CHECK_P_NOT_SAFE_PRIME":2,"DH_CHECK_P_NOT_PRIME":1,"DH_UNABLE_TO_CHECK_GENERATOR":4,"DH_NOT_SUITABLE_GENERATOR":8,"NPN_ENABLED":1,"RSA_PKCS1_PADDING":1,"RSA_SSLV23_PADDING":2,"RSA_NO_PADDING":3,"RSA_PKCS1_OAEP_PADDING":4,"RSA_X931_PADDING":5,"RSA_PKCS1_PSS_PADDING":6,"POINT_CONVERSION_COMPRESSED":2,"POINT_CONVERSION_UNCOMPRESSED":4,"POINT_CONVERSION_HYBRID":6,"F_OK":0,"R_OK":4,"W_OK":2,"X_OK":1,"UV_UDP_REUSEADDR":4}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************************************************************!*\
  !*** ./cypress/e2e/Kadi-Kristel.Koop_registration_form_2_test.cy.js ***!
  \**********************************************************************/


const exp = __webpack_require__(/*! constants */ "../AppData/Local/Cypress/Cache/13.4.0/Cypress/resources/app/node_modules/constants-browserify/constants.json");
beforeEach(() => {
  cy.visit("cypress/fixtures/registration_form_2.html");
});

/*
Assignement 4: add content to the following tests
*/

describe("Section 1: Functional tests, created by: Kadi-Kristel", () => {
  it("User can use only same both first and validation passwords", () => {
    // Add test steps for filling in only mandatory fields
    cy.get("#username").type("kadikristel");
    cy.get("#email").type("kadi@test.com");
    cy.get('[data-cy="name"]').type("Kadi");
    cy.get("#lastName").type("Koop");
    cy.get('[data-testid="phoneNumberTestId"]').type("555666777");
    cy.get("#password").type("Password123");

    // Type confirmation password which is different from first password
    cy.get("#confirm").type("Pass321");
    cy.get("h2").contains("Password").click();
    cy.get('[name="confirm"]').type("{enter}");
    cy.window().scrollTo("bottom");
    cy.get("#password_error_message").should("be.visible").should("contain", "Passwords do not match!");
    cy.get("#success_message").should("not.be.visible");
    cy.get("button.submit_button").should("not.be.enabled");
    cy.get('input[name="confirm"]').should("have.attr", "title", "Both passwords should match");
    cy.get("#confirm").clear().type("Password123");
    cy.get("h2").contains("Password").click();
    cy.get("#password_error_message").should("not.be.visible");
    cy.get("#success_message").should("not.be.visible");
    cy.get("button.submit_button").should("be.enabled");
    cy.get("button.submit_button").click();
    cy.get("#success_message").should("be.visible").should("contain", "User successfully submitted registration");
    cy.get("#success_message").should("have.css", "display", "block");
  });
  it("User can submit form with all fields added", () => {
    // Add test steps for filling in ALL fields
    cy.get("#username").type("kadikristel");
    cy.get("#email").type("kadi@test.com");
    cy.get('[data-cy="name"]').type("Kadi");
    cy.get("#lastName").type("Koop");
    cy.get('[data-testid="phoneNumberTestId"]').type("555666777");
    cy.get('input[type="radio"]').eq(1).check().should("be.checked");
    cy.get('input[type="checkbox"]').eq(2).check().should("be.checked");
    cy.get("#cars").select(3);
    cy.get("#animal").select(1);
    cy.get("#password").type("Password123");
    cy.get("#confirm").type("Password123");

    // Assert that submit button is enabled
    cy.get("h2").contains("Password").click();
    cy.get(".submit_button").should("be.enabled").click();
    cy.get("#password_error_message").should("not.be.visible");
    cy.get("#input_error_message").should("not.be.visible");
    cy.get("#success_message").should("be.visible").should("contain", "User successfully submitted registration");
    cy.get("#success_message").should("have.css", "display", "block");
  });
  it("User can submit form with valid data and only mandatory fields added", () => {
    // Add test steps for filling in ONLY mandatory fields
    cy.get("#username").type("kadikristel");
    cy.get("#email").type("kadi@test.com");
    cy.get('[data-cy="name"]').type("Kadi");
    cy.get("#lastName").type("Koop");
    cy.get('[data-testid="phoneNumberTestId"]').type("555666777");
    cy.get("#password").type("Password123");
    cy.get("#confirm").type("Password123");

    // Assert that submit button is enabled
    cy.get("h2").contains("Password").click();
    cy.get("button.submit_button").should("be.enabled").click();
    cy.get("#input_error_message").should("not.be.visible");
    cy.get("#password_error_message").should("have.css", "display", "none");
    // Assert that after submitting the form system shows successful message
    cy.get("#success_message").should("be.visible").should("contain", "User successfully submitted registration");
    cy.get("#success_message").should("have.css", "display", "block");

    // example, how to use function, which fills in all mandatory data
    // in order to see the content of the function, scroll to the end of the file
    inputValidData("johnDoe");
  });
  it("User cannot submit the form when email is not added", () => {
    cy.get("#username").type("kadikristel");
    cy.get("#email").type("kadi@test.com");
    cy.get('[data-cy="name"]').type("Kadi");
    cy.get("#lastName").type("Koop");
    cy.get('[data-testid="phoneNumberTestId"]').type("555666777");
    cy.get("#password").type("Password123");
    cy.get("#confirm").type("Password123");
    cy.get("#email").scrollIntoView();
    cy.get("#email").clear();
    cy.get("h2").contains("Password").click();
    cy.get(".submit_button").should("be.disabled");
    cy.get("#input_error_message").should("be.visible").should("contain", "Mandatory input field is not valid or empty!");
    cy.get("#success_message").should("not.be.visible");
  });
});

/*
Assignement 5: create more visual tests
*/

describe("Section 2: Visual tests, created by: Kadi-Kristel", () => {
  it("Check that Cerebrum Hub logo is correct and has correct size", () => {
    cy.log("Will check Cerebrum Hub logo source and size");
    cy.get("#logo").should("have.attr", "src").should("include", "cerebrum_hub_logo");
    // get element and check its parameter height
    // it should be less than 178 and greater than 100
    cy.get("#logo").invoke("height").should("be.lessThan", 178).and("be.greaterThan", 100);
  });
  it("Check that Cypress logo is correct and has correct size", () => {
    cy.log("Check Cypress logo source and size");
    cy.get('[data-cy="cypress_logo"]').should("have.attr", "src").should("include", "cypress_logo");
    cy.get('[data-cy="cypress_logo"]').invoke("height").should("be.lessThan", 116).and("be.greaterThan", 80);
  });
  it("Check navigation part, registration form 1", () => {
    cy.get("nav").children().should("have.length", 2);

    // Get navigation element, find siblings that contains h1 and check if it has Registration form in string
    cy.get("nav").siblings("h1").should("have.text", "Registration form number 2");

    // Get navigation element, find its first child, check the link content and click it
    cy.get("nav").children().eq(0).should("be.visible").and("have.attr", "href", "registration_form_1.html").click();

    // Check that currently opened URL is correct
    cy.url().should("contain", "/registration_form_1.html");

    // Go back to previous page
    cy.go("back");
    cy.log("Back again in registration form 2");
  });
  it("Check navigation part, registration form 3", () => {
    cy.get("nav").children().should("have.length", 2);
    cy.get("nav").siblings("h1").should("have.text", "Registration form number 2");
    cy.get("nav").children().eq(1).should("be.visible").and("have.attr", "href", "registration_form_3.html").click();
    cy.url().should("contain", "/registration_form_3.html");
    cy.go("back");
    cy.log("Back again in Registration form 2");
  });
  it("Check that radio button list is correct", () => {
    // Array of found elements with given selector has 4 elements in total
    cy.get('input[type="radio"]').should("have.length", 4);

    // Verify labels of the radio buttons
    cy.get('input[type="radio"]').next().eq(0).should("have.text", "HTML");
    cy.get('input[type="radio"]').next().eq(1).should("have.text", "CSS");
    cy.get('input[type="radio"]').next().eq(2).should("have.text", "JavaScript");
    cy.get('input[type="radio"]').next().eq(3).should("have.text", "PHP");

    //Verify default state of radio buttons
    cy.get('input[type="radio"]').eq(0).should("not.be.checked");
    cy.get('input[type="radio"]').eq(1).should("not.be.checked");
    cy.get('input[type="radio"]').eq(2).should("not.be.checked");
    cy.get('input[type="radio"]').eq(3).should("not.be.checked");

    // Selecting one will remove selection from the other radio button
    cy.get('input[type="radio"]').eq(0).check().should("be.checked");
    cy.get('input[type="radio"]').eq(1).check().should("be.checked");
    cy.get('input[type="radio"]').eq(0).should("not.be.checked");
  });
  it("Check that check box list is correct", () => {
    cy.get('input[type="checkbox"]').should("have.length", 3);
    cy.get('input[type="checkbox"]').next().eq(0).should("have.text", "I have a bike");
    cy.get('input[type="checkbox"]').next().eq(1).should("have.text", "I have a car");
    cy.get('input[type="checkbox"]').next().eq(2).should("have.text", "I have a boat");
    cy.get('input[type="checkbox"]').eq(0).should("not.be.checked");
    cy.get('input[type="checkbox"]').eq(1).should("not.be.checked");
    cy.get('input[type="checkbox"]').eq(2).should("not.be.checked");

    // Check the checkboxes and verify it is checked
    cy.get('input[type="checkbox"]').eq(0).check().should("be.checked");
    cy.get('input[type="checkbox"]').eq(1).check().should("be.checked");
    cy.get('input[type="checkbox"]').eq(2).check().should("be.checked");
  });
  it("Car dropdown is correct", () => {
    // Here is just an example how to explicitely create screenshot from the code
    // Select second element and create screenshot for this area or full page
    cy.get("#cars").select(1).screenshot("Cars drop-down");
    cy.screenshot("Full page screenshot");

    // Here are given different solutions how to get the length of array of elements in Cars dropdown
    // Next 2 lines of code do exactly the same!
    cy.get("#cars").children().should("have.length", 4);
    cy.get("#cars").find("option").should("have.length", 4);

    // Check  that first element in the dropdown has text Volvo
    cy.get("#cars").find("option").eq(0).should("have.text", "Volvo");

    // Advanced level how to check the content of the Cars dropdown
    cy.get("#cars").find("option").then(options => {
      const actual = [...options].map(option => option.value);
      expect(actual).to.deep.eq(["volvo", "saab", "opel", "audi"]);
    });
  });
  it("Animal dropdown is correct", () => {
    cy.get("#animal").select(1).screenshot("Animal drop-down");
    cy.screenshot("Full page screenshot");
    cy.get("#animal").children().should("have.length", 6);
    cy.get("#animal").find("option").should("have.length", 6);
    cy.get("#animal").find("option").eq(3).should("have.text", "Hippo");

    // Advanced level how to check the content of the Animal dropdown
    cy.get("#animal").find("option").then(options => {
      const actual = [...options].map(option => option.value);
      expect(actual).to.deep.eq(["dog", "cat", "snake", "hippo", "cow", "mouse"]);
    });
  });
});
function inputValidData(username) {
  cy.log("Username will be filled");
  cy.get('input[data-testid="user"]').type(username);
  cy.get("#email").type("validemail@yeap.com");
  cy.get('[data-cy="name"]').type("John");
  cy.get("#lastName").type("Doe");
  cy.get('[data-testid="phoneNumberTestId"]').type("10203040");
  cy.get("#password").type("MyPass");
  cy.get("#confirm").type("MyPass");
  cy.get("h2").contains("Password").click();
}
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,